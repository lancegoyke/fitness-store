# Generated by Django 5.2.4 on 2025-07-23 13:10

from django.db import migrations


def convert_tagged_items_to_challenge_tags(apps, schema_editor):
    """Convert existing TaggedItem records to ChallengeTag relationships."""
    # Get models
    Challenge = apps.get_model('challenges', 'Challenge')
    ChallengeTag = apps.get_model('challenges', 'ChallengeTag')
    Tag = apps.get_model('taggit', 'Tag')
    TaggedItem = apps.get_model('taggit', 'TaggedItem')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get the ContentType for Challenge model
    try:
        challenge_content_type = ContentType.objects.get(
            app_label='challenges',
            model='challenge'
        )
    except ContentType.DoesNotExist:
        # If ContentType doesn't exist, skip migration
        return

    # Create ChallengeTag instances from existing Tag instances that are used by challenges
    challenge_tagged_items = TaggedItem.objects.filter(
        content_type=challenge_content_type
    )

    used_tag_ids = set(challenge_tagged_items.values_list('tag_id', flat=True))

    # Create ChallengeTag for each used tag
    for tag in Tag.objects.filter(id__in=used_tag_ids):
        challenge_tag, created = ChallengeTag.objects.get_or_create(
            name=tag.name,
            defaults={'slug': tag.slug}
        )

        # Create relationships for all challenges that had this tag
        challenge_ids = challenge_tagged_items.filter(tag=tag).values_list('object_id', flat=True)
        for challenge_id in challenge_ids:
            try:
                challenge = Challenge.objects.get(id=challenge_id)
                challenge.challenge_tags.add(challenge_tag)
            except Challenge.DoesNotExist:
                # Challenge doesn't exist, skip
                continue


def reverse_convert_tagged_items(apps, schema_editor):
    """Reverse migration - remove ChallengeTag relationships."""
    ChallengeTag = apps.get_model('challenges', 'ChallengeTag')
    Challenge = apps.get_model('challenges', 'Challenge')

    # Clear all challenge_tags relationships
    for challenge in Challenge.objects.all():
        challenge.challenge_tags.clear()

    # Delete all ChallengeTag instances
    ChallengeTag.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("challenges", "0005_challengetag_challenge_challenge_tags"),
    ]

    operations = [
        migrations.RunPython(
            convert_tagged_items_to_challenge_tags,
            reverse_convert_tagged_items,
        ),
    ]
